<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  

  
  <title>深入学习HTTP请求流程 | keysking瞎写东西的地方</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="深入HTTP请求流程啥叫HTTP协议HTTP协议说人话就是超文本传输协议，是一中详细规定了浏览器和万维网网服务器之间相互通信的协议，听说是万维网交换信息的基础. HTTP是一种无状态协议，意思是说Web浏览器与Web服务器之间不需要建立持久的连接，当客户端发送完HTTP请求（request），然后服务端返回HTTP响应（response）以后，连接就会被无情地断开~ 也就是说，言下之意就是，HTT">
<meta property="og:type" content="article">
<meta property="og:title" content="深入学习HTTP请求流程">
<meta property="og:url" content="http://yoursite.com/深入学习HTTP请求流程/2017/02/04">
<meta property="og:site_name" content="keysking瞎写东西的地方">
<meta property="og:description" content="深入HTTP请求流程啥叫HTTP协议HTTP协议说人话就是超文本传输协议，是一中详细规定了浏览器和万维网网服务器之间相互通信的协议，听说是万维网交换信息的基础. HTTP是一种无状态协议，意思是说Web浏览器与Web服务器之间不需要建立持久的连接，当客户端发送完HTTP请求（request），然后服务端返回HTTP响应（response）以后，连接就会被无情地断开~ 也就是说，言下之意就是，HTT">
<meta property="og:updated_time" content="2017-02-15T12:47:53.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="深入学习HTTP请求流程">
<meta name="twitter:description" content="深入HTTP请求流程啥叫HTTP协议HTTP协议说人话就是超文本传输协议，是一中详细规定了浏览器和万维网网服务器之间相互通信的协议，听说是万维网交换信息的基础. HTTP是一种无状态协议，意思是说Web浏览器与Web服务器之间不需要建立持久的连接，当客户端发送完HTTP请求（request），然后服务端返回HTTP响应（response）以后，连接就会被无情地断开~ 也就是说，言下之意就是，HTT">
  
    <link rel="alternate" href="/atom.xml" title="keysking瞎写东西的地方" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  
    <link href="//fonts.googleapis.com/css?family=Source+Code+Pro" rel="stylesheet" type="text/css">
  
  <link rel="stylesheet" href="/css/style.css">
</head>

<body>
  <div id="container">
    <div id="wrap">
      <header id="header">
  <div id="banner"></div>
  <div id="header-outer" class="outer">
    <div id="header-title" class="inner">
      <h1 id="logo-wrap">
        <a href="/" id="logo">keysking瞎写东西的地方</a>
      </h1>
      
    </div>
    <div id="header-inner" class="inner">
      <nav id="main-nav">
        <a id="main-nav-toggle" class="nav-icon"></a>
        
          <a class="main-nav-link" href="/">Home</a>
        
          <a class="main-nav-link" href="/archives">Archives</a>
        
      </nav>
      <nav id="sub-nav">
        
          <a id="nav-rss-link" class="nav-icon" href="/atom.xml" title="RSS Feed"></a>
        
        <a id="nav-search-btn" class="nav-icon" title="Suche"></a>
      </nav>
      <div id="search-form-wrap">
        <form action="//google.com/search" method="get" accept-charset="UTF-8" class="search-form"><input type="search" name="q" class="search-form-input" placeholder="Search"><button type="submit" class="search-form-submit">&#xF002;</button><input type="hidden" name="sitesearch" value="http://yoursite.com"></form>
      </div>
    </div>
  </div>
</header>
      <div class="outer">
        <section id="main"><article id="post-深入学习HTTP请求流程" class="article article-type-post" itemscope itemprop="blogPost">
  <div class="article-meta">
    <a href="/深入学习HTTP请求流程/2017/02/04" class="article-date">
  <time datetime="2017-02-04T12:47:19.000Z" itemprop="datePublished">2017-02-04</time>
</a>
    
  </div>
  <div class="article-inner">
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      深入学习HTTP请求流程
    </h1>
  

      </header>
    
    <div class="article-entry" itemprop="articleBody">
      
        <h1 id="深入HTTP请求流程"><a href="#深入HTTP请求流程" class="headerlink" title="深入HTTP请求流程"></a>深入HTTP请求流程</h1><h2 id="啥叫HTTP协议"><a href="#啥叫HTTP协议" class="headerlink" title="啥叫HTTP协议"></a>啥叫HTTP协议</h2><p>HTTP协议说人话就是超文本传输协议，是一中详细规定了浏览器和万维网网服务器之间相互通信的协议，听说是万维网交换信息的基础.</p>
<p>HTTP是一种无状态协议，意思是说Web浏览器与Web服务器之间不需要建立持久的连接，当客户端发送完HTTP请求（request），然后服务端返回HTTP响应（response）以后，连接就会被无情地断开~ 也就是说，言下之意就是，HTTP协议只允许客户端联系服务端.<br><a id="more"></a> </p>
<h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>HTTP请求三个部分，分别为</p>
<p>*请求行 （请求方法）</p>
<p>*请求头 （消息报头）</p>
<p>*请求正文</p>
<p>​    HTTP请求例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post /login.php HTTP/1.1		//请求行</span><br><span class="line">HOST: www.keysking.com			//请求头(开始)</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:15.0)  Gecko/20100101 Firefox/15.0</span><br><span class="line">								//空白行 代表请求头结束,请求正文开始</span><br><span class="line">Username=keysking&amp;password=pass	//请求正文</span><br></pre></td></tr></table></figure>
<h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求行用一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本，格式如下：</p>
<p><code>Method Request-URI HTTP-Version</code></p>
<p>其中</p>
<blockquote>
<p>Method表示请求方法；</p>
<p>Request-URI是一个统一资源标识符(也就是URL)；</p>
<p>HTTP-Version表示请求的HTTP协议版本；</p>
</blockquote>
<p>例如:</p>
<p><code>GET /form.html HTTP/1.1 (CRLF)</code></p>
<p>其中，请求方法有如下几种:</p>
<blockquote>
<p>GET     请求获取Request-URI所标识的资源</p>
<p>POST    在Request-URI所标识的资源后附加新的数据</p>
<p>HEAD    请求获取由Request-URI所标识的资源的响应消息报头</p>
<p>PUT     请求服务器存储一个资源，并用Request-URI作为其标识</p>
<p>DELETE  请求服务器删除Request-URI所标识的资源</p>
<p>TRACE   请求服务器回送收到的请求信息，主要用于测试或诊断</p>
<p>CONNECT 保留将来使用</p>
<p>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求</p>
</blockquote>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>在HTTP请求中,从第二行到空白行(见上面例子),都是请求头的国土.</p>
<ol>
<li><p>Host </p>
<p>Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</p>
</li>
<li><p>Referer</p>
<p>Referer头域允许客户端指定请求uri的源资源地址，这可以允许服务器生成回退链表，可用来登陆、优化cache等。他也允许废除的或错误的连接由于维护的目的被追踪。如果请求的uri没有自己的uri地址，Referer不能被发送。如果指定的是部分uri地址，则此地址应该是一个相对地址。</p>
<p>(说人话就是,告诉服务器你是从哪个页面点进来的~~~)</p>
</li>
<li><p>User-Agent</p>
<p>User-Agent头域的内容包含发出请求的用户信息.</p>
<p>这玩意可暴露你好多信息呐,啥操作系统,浏览器啥的,统统发给服务器~</p>
</li>
<li><p>Cookie</p>
<p>别小看这个小饼干(cookie的原意)哦,它可是一个非常重要的请求头,常用来表示请求者的身份,我们平时让网站记住自己的登录状态就多亏了它哦~~</p>
</li>
<li><p>Range</p>
<blockquote>
<p>Range头域可以请求实体的一个或者多个子范围。例如，</p>
<p>表示头500个字节：bytes=0-499</p>
<p>表示第二个500字节：bytes=500-999<br>表示最后500个字节：bytes=-500<br>表示500字节以后的范围：bytes=500-<br>第一个和最后一个字节：bytes=0-0,-1<br>同时指定几个范围：bytes=500-600,601-999<br>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206（PartialContent）返回而不是以200（OK）。</p>
</blockquote>
<p>貌似与文件的下载有关…不懂~~~QAQ</p>
</li>
<li><p>x-forward-for</p>
<p>又叫XFF头,它代表客户端，也就是HTTP的请求端的IP,可以有多个,中间用逗号隔开~    标准格式如下：</p>
<p><code>X-Forwarded-For: client1, proxy1, proxy2</code> </p>
<p>第一项为真实的客户端ip，剩下的就是曾经经过的代理或负载均衡的ip地址，经过几个就会出现几个。</p>
<p>听说可以通过伪造这玩意刷票~~(笑</p>
</li>
<li><p>Accept</p>
<p>用来告诉服务端客户端想获得哪些MIME类型的信息,比如<code>Accept: text/html</code> 就表示客户端希望接受HTML文本.</p>
</li>
<li><p>Accept-Charset</p>
<p>用于告诉服务器客户端想接受的字符集.</p>
</li>
</ol>
<h3 id="请求正文"><a href="#请求正文" class="headerlink" title="请求正文"></a>请求正文</h3><p>HTTP请求的最后是请求正文,请求正文可有可没有,一般用于POST请求方法.</p>
<h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>服务器接到来自客户端的HTTP请求后,就会对请求进行分析处理,然后向客户端发送HTTP响应.HTTP响应也包含三个部分,分别是响应行,响应头(消息报头)和响应正文(消息主题).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK		//响应行</span><br><span class="line">Date: Sat, 31 Dec 2005 23:59:59 GMT 	//响应头开始</span><br><span class="line">Content-Type: text/html;charset=ISO-8859-1</span><br><span class="line">Content-Length: 122</span><br><span class="line">										//空白行,代表响应行结束</span><br><span class="line">＜html＞								//响应正文</span><br><span class="line">＜head＞</span><br><span class="line">＜title＞Wrox Homepage＜/title＞</span><br><span class="line">＜/head＞</span><br><span class="line">＜body＞</span><br><span class="line">＜!-- body goes here --＞</span><br><span class="line">＜/body＞</span><br><span class="line">＜/html＞</span><br></pre></td></tr></table></figure>
<h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><p>HTTP响应的第一行是响应行,其中包括HTTP版本,状态码(比如上面例子中的200),以及消息(“OK”).</p>
<p>响应行中的状态码用来告知客户端响应的状态,不同的状态码代表的状态不同.</p>
<p>状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</p>
<pre><code>1xx：指示信息--表示请求已接收，继续处理。
2xx：成功--表示请求已被成功接收、理解、接受。
3xx：重定向--要完成请求必须进行更进一步的操作。
4xx：客户端错误--请求有语法错误或请求无法实现。
5xx：服务器端错误--服务器未能实现合法的请求。
</code></pre><p>常见状态代码、状态描述的说明如下。</p>
<pre><code>200 OK：客户端请求成功。
400 Bad Request：客户端请求有语法错误，不能被服务器所理解。
401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。
403 Forbidden：服务器收到请求，但是拒绝提供服务。
404 Not Found：请求资源不存在，举个例子：输入了错误的URL。
500 Internal Server Error：服务器发生不可预期的错误。
503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP/1.1 200 OK。
</code></pre><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>响应头与请求头的作用差不多,也是标识一些属性,常见的相应头如下:</p>
<ol>
<li><p>Sever</p>
<p>服务器所用的Web服务器名称,比如Sever:Apache/1.3.6(Unix),渗透测试者可以利用这个探测Web服务器名称.</p>
</li>
<li><p>Set-Cookie</p>
<p>向服务端设置Cookie</p>
</li>
<li><p>Last-Modified</p>
<p>资料修改的最后时间.</p>
</li>
<li><p>Location</p>
<p>告诉浏览器去访问哪个页面,浏览器接收到这个请求后,通常会立刻访问Location头所指向的页面,通常配合302状态码使用.</p>
</li>
<li><p>Refresh</p>
<p>告诉浏览器定时刷新页面.</p>
</li>
</ol>
<h3 id="消息报头"><a href="#消息报头" class="headerlink" title="消息报头"></a>消息报头</h3><p>是服务器向客户端发送的HTML数据</p>

      
    </div>
    <footer class="article-footer">
      <a data-url="http://yoursite.com/深入学习HTTP请求流程/2017/02/04" data-id="cjc8v92as000bxz3kl5ncsq05" class="article-share-link">Teilen</a>
      
      
    </footer>
  </div>
  
    
<nav id="article-nav">
  
    <a href="/L293D电机驱动板在Arduino上使用笔记/2017/02/09" id="article-nav-newer" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Neuer</strong>
      <div class="article-nav-title">
        
          L293D电机驱动版在Arduino上使用笔记
        
      </div>
    </a>
  
  
    <a href="/使用文件查看漏洞读取网页代码/2017/01/25" id="article-nav-older" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Älter</strong>
      <div class="article-nav-title">使用文件查看漏洞读取网页代码</div>
    </a>
  
</nav>

  
</article>

</section>
        
          <aside id="sidebar">
  
    

  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Tags</h3>
    <div class="widget">
      <ul class="tag-list"><li class="tag-list-item"><a class="tag-list-link" href="/tags/Arduino-电子/">-Arduino -电子</a></li><li class="tag-list-item"><a class="tag-list-link" href="/tags/DVWA-漏洞测试/">-DVWA -漏洞测试</a></li></ul>
    </div>
  </div>


  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Tag Cloud</h3>
    <div class="widget tagcloud">
      <a href="/tags/Arduino-电子/" style="font-size: 10px;">-Arduino -电子</a> <a href="/tags/DVWA-漏洞测试/" style="font-size: 10px;">-DVWA -漏洞测试</a>
    </div>
  </div>

  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Archiv</h3>
    <div class="widget">
      <ul class="archive-list"><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/03/">March 2017</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/02/">February 2017</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2017/01/">January 2017</a></li></ul>
    </div>
  </div>


  
    
  <div class="widget-wrap">
    <h3 class="widget-title">letzter Beitrag</h3>
    <div class="widget">
      <ul>
        
          <li>
            <a href="/w3af翻译与使用/2017/03/12">w3af翻译与使用</a>
          </li>
        
          <li>
            <a href="/CTF-天网管理系统-md50e与弱类型相等/2017/03/09">CTF_天网管理系统_md50e与弱类型相等</a>
          </li>
        
          <li>
            <a href="/python练手-爬取乌云镜像高危漏洞/2017/03/01">[python练手]爬取乌云镜像高危漏洞</a>
          </li>
        
          <li>
            <a href="/web渗透方向总结/2017/02/15">web渗透方向总结</a>
          </li>
        
          <li>
            <a href="/DVWA漏洞系统攻略-low/2017/02/09">DVWA漏洞系统攻略_low</a>
          </li>
        
      </ul>
    </div>
  </div>

  
</aside>
        
      </div>
      <footer id="footer">
  
  <div class="outer">
    <div id="footer-info" class="inner">
      &copy; 2018 Keysking<br>
      Powered by <a href="http://hexo.io/" target="_blank">Hexo</a>
    </div>
  </div>
</footer>
    </div>
    <nav id="mobile-nav">
  
    <a href="/" class="mobile-nav-link">Home</a>
  
    <a href="/archives" class="mobile-nav-link">Archives</a>
  
</nav>
    

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>


  <link rel="stylesheet" href="/fancybox/jquery.fancybox.css">
  <script src="/fancybox/jquery.fancybox.pack.js"></script>


<script src="/js/script.js"></script>



  </div>
</body>
</html>